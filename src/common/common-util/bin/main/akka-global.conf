akka {
  stdout-loglevel = "OFF"
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  loglevel = "DEBUG"
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"

  actor {
    # for now, using java serialization
    allow-java-serialization = true
    warn-about-java-serializer-usage = false
  }

  remote {
    artery {
      transport = ${?XROAD_COMMON_AKKA_REMOTE_TRANSPORT}

      canonical {
        port = 0
        hostname = "127.0.0.1"
      }

      ssl.config-ssl-engine {
          trust-store=${?XROAD_COMMON_AKKA_TRUSTSTORE}
          trust-store-password=${?XROAD_COMMON_AKKA_TRUSTSTORE_PASSWORD}

          key-password=${?XROAD_COMMON_AKKA_KEYSTORE_PASSWORD}
          key-store=${?XROAD_COMMON_AKKA_KEYSTORE}
          key-store-password=${?XROAD_COMMON_AKKA_KEYSTORE_PASSWORD}

          protocol = "TLSv1.2"
          enabled-algorithms = [TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256]
      }

      advanced {
        # Maximum serialized message size, including header data.
        maximum-frame-size = 256 KiB

        # Disable compression:
        #   Most actors are temporary (often used only once), but
        #   the compression cache seems to keep mappings also to those
        #   and use lot of memory.
        #   All communications are over the loopback interface, compression
        #   effect on performance is small.
        compression {
          actor-refs {
            max = "off"
          }
          manifests {
            max = "off"
          }
        }

        # see https://github.com/akka/akka/issues/29828
        # make the problem less probable
        remove-quarantined-association-after = 2 h
      }
    }

    # for now, using remoting directly instead of a cluster
    warn-about-direct-use = off

    # but disable remote deployment
    deployment {
      enable-whitelist = on
      whitelist = []
    }
  }
}
