plugins {
    id 'base'
    id 'com.github.node-gradle.node' version "$nodePluginVersion"
}

configurations {
    npm
    dist
}

dependencies {
    npm project(path: ":shared-ui", configuration: "npm")
}

node {
    download = true
    version = nodeVersion

    if (System.getenv().containsKey("CI")) {
        npmInstallCommand = "ci"
    }
}

task npmUpdateDeps(type: NpmTask, dependsOn: configurations.npm) {
    inputs.files('package.json')
    outputs.files('package-lock.json')
    args = ['--quiet', 'install', '--package-lock-only'] + configurations.npm.files.collect { it.toString() }
}

task cleanNpmInstallDeps {
    //NOP, we do not want to accidentally delete package-lock.json
}

npmInstall {
    dependsOn += 'npmUpdateDeps'
}

task npmBuild(type: NpmTask, dependsOn: ['npmInstall']) {
    inputs.files(
        'src/',
        'public/',
        'package.json',
        'package-lock.json',
        'vue.config.js',
        'tsconfig.js',
        'babel.config.js',
        fileTree('node_modules') {
            exclude '.cache'
            exclude 'webpack-dev-server/ssl'
        }
    )
    outputs.dir('dist')
    args = ['run', '--quiet', 'build']
}

task checkFrontAudit(type: NpmTask) {
    inputs.files(
        'package.json',
        'package-lock.json'
    )
    outputs.files("${buildDir}/reports/audit-ci.txt")
    args = ['run', 'npx-check-audit']
}

// check that npm run license-check passes
task checkFrontLicense(type: NpmTask, dependsOn: 'npmInstall') {
    inputs.files(
        "test/",
        "public/",
        fileTree('src/') {
            exclude 'openapi-types'
        }
    )
    outputs.upToDateWhen { true }
    args = ['run', 'license-check']
}

// check that npm run test:unit passes
task frontendUnitTests(type: NpmTask, dependsOn: 'npmBuild') {
    inputs.files("dist", "test", "public")
    outputs.upToDateWhen { true }
    args = ['run', 'test:unit']
}

// run e2e tests vs remote url
if (!project.hasProperty("testTargetUrl")) {
    ext.testTargetUrl = ""
}

if (!project.hasProperty("testDataUrl")) {
    ext.testDataUrl = ""
}

if (!project.hasProperty("withTags")) {
    ext.withTags = ""
}

if (!project.hasProperty("withoutTags")) {
    ext.withoutTags = ""
}

if (!project.hasProperty("failScreenshot")) {
    ext.failScreenshot = ""
}

if (!project.hasProperty("runHeadless")) {
    ext.runHeadless = ""
}

// TODO: rename these to "e2e"
if (!project.hasProperty("testscript")) {
    ext.testscript = ""
}

if (!project.hasProperty("testcase")) {
    ext.testcase = ""
}

if (!project.hasProperty("testverbose")) {
    ext.testverbose = ""
}

task e2eTest(type: NpmTask, dependsOn: 'npmInstall') {

    doFirst {
        if (testTargetUrl.isEmpty()) {
            throw new GradleException('testTargetUrl property was empty, it is mandatory for e2eTests')
        }
        if (testDataUrl.isEmpty()) {
            throw new GradleException('testDataUrl property was empty, it is mandatory for e2eTests')
        }
    }

    inputs.files fileTree("/") { exclude("dist/", "node_modules/.cache/") }
    outputs.dir("dist")

    args = ['run', 'test:e2e', '--', '--url=' + testTargetUrl, '--testdata=' + testDataUrl, '--tag=' + withTags, '--skiptags=' + withoutTags]

    if (!testverbose.isEmpty()) {
        if (testverbose == "true") {
            args.add("--verbose")
        }
    }

    if (!runHeadless.isEmpty()) {
        if (runHeadless == "true") {
            args.add("--headless")
        }
    }

    if (!failScreenshot.isEmpty()) {
        if (failScreenshot == "true") {
            args.add("--env screenshot")
        }
    }

    // (at least if testcase name has spaces) wrap name in quotes, e.g. -Ptestcase "Security server client add wsdl service"
    if (!testcase.isEmpty()) {
        if (testscript.isEmpty()) {
            // to run specific testcase, your need to also define -Ptestscript, otherwise nightwatch ignores this parameter
            throw new GradleException('Tried to use -Ptestcase without -Ptestscript, that will not work.')
        }
        args.add("--testcase=" + testcase);
        println 'set testcase arg to value [' + testcase + ']'

    }

    if (!testscript.isEmpty()) {
        args.add("--test=" + testscript)
    }

}


clean {
    delete file('node_modules')
    delete file('dist')
}

// checkFrontLicense -> buildFront -> frontendUnitTests -> processResources
assemble.dependsOn npmBuild
check.dependsOn checkFrontLicense
check.dependsOn frontendUnitTests

if (project.hasProperty('frontend-npm-audit')) {
    npmUpdateDeps.dependsOn checkFrontAudit
}

artifacts {
    dist(file("dist/")) {
        builtBy(npmBuild)
    }
}
